$pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2

$cert = gi "<%= @location %>/<%= @cert_name %>*"

switch -regex ($cert.Extension.ToUpper()) {
    ".CER|.DER|.P12" {
        $pfx.Import($cert,"<%= @password %>","<%= @key_storage_flags %>")
    }
    ".CRT" {
        $pfx.Import([System.IO.File]::ReadAllBytes($cert))
    }
    ".P7B|.SST" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.Import([System.IO.File]::ReadAllBytes($cert))
    }
    ".PFX|.P12" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.import($cert,"<%= @password %>","<%= @key_storage_flags %>")
    }
}

$store = new-object System.Security.Cryptography.X509Certificates.X509Store("<%= @store_dir %>","<%= @root_store %>")
$store.open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)

$intermediatestore = new-object System.Security.Cryptography.X509Certificates.X509Store("CA","<%= @root_store %>")
$intermediatestore.open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)

#foreach($cert in $pfx) {
#  if($cert.Thumbprint -ne "<%= @thumbprint %>") {
#      $intermediatestore.Add($cert)
#  }
#  else {
#      $store.Add($cert)
#  }
#}

foreach($cert in $pfx) {
	#if($cert.Thumbprint -eq "0x<%= @thumbprint %>"){
	$store.Add($cert)
	#}
}



$store.close()
