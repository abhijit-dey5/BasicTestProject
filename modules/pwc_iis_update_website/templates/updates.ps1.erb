#Codes for website content and configuration update

Import-Module WebAdministration
$date = (Get-Date).ToString()
#$date_str = (Get-Date -Format d).ToString()-replace '/','_'
$store = '<%=@storage_drive%>'
$store = $store.ToUpper()
$logpath = $store+':\Logs\IIS\Website\Modification_log\logfile.txt'
$site_titles = '<%=@site_title%>'

$web_sites = (Get-ChildItem -Path IIS:\Sites).Name

if(!$web_sites.Contains($site_titles)){
Write-Host $site_titles 'is not a valid website name.' -ForegroundColor Red
$date+': '+$site_titles+' is not a valid website name.'|Out-File $logpath -Append ascii -Force
Write-Host 'Check the website name and try again' -ForegroundColor Red
$date+': Check the website name and try again'|Out-File $logpath -Append ascii -Force
Write-Host 'Remember the website names are case-sensitive. So check the characters carefully' -ForegroundColor Red
$date+': Remember the website names are case-sensitive. So check the characters carefully'|Out-File $logpath -Append ascii -Force
'______________________END OF RUN______________________'|Out-File $logpath -Append ascii -Force
'  '|Out-File $logpath -Append ascii -Force
exit 0
}

$update_items = '<%=@update%>'
Write-Host 'The item to update is '$update_items
$date+': The item to update is '+$update_items| Out-File $logpath -Append ascii -Force

##code for content update

if($update_items -eq 'content'){
 
 #$site_path = (Get-Website -Name $site_titles).PhysicalPath
 $site_path = "<%= @site_new_path%>"
 Write-Host 'The Physical Path for the given website is '$site_path #| Out-File $logpath -Append ascii
 $date+': The Physical Path for the given website is ' + $site_path | Out-File $logpath -Append ascii -Force

 $source_file= $site_path
 $destination_file="<%=@backup_new_path%>"
 Get-ChildItem -Path $destination_directory -Include * -Recurse -Force | foreach { Remove-Item $_.FullName -Recurse -Force }
 Copy-Item -Path $source_file/* -Destination $destination_file -Recurse -Force


 $source_directory = '<%=@source_path%>'
 Write-Host 'The Source Directory Chosen for the website ' $site_titles ' is ' $source_directory
 $date+': The Source Directory Chosen for the website '+$site_titles+' is '+$source_directory | Out-File $logpath -Append ascii -Force

 $destination_directory = $site_path

 Write-Host 'removing all existing item from the physical path of the website ' 
 $date+': removing all existing item from the physical path of the website'| Out-File $logpath -Append ascii -Force
 Get-ChildItem -Path $destination_directory -Include * -Recurse -Force | foreach { Remove-Item $_.FullName -Recurse -Force }

 Get-Item $destination_directory| ForEach-Object `
 {
     Write-Host 'Getting items of the source path to the Physical Path of the website ' $site_titles
     $date+': Getting items of the source path to the Physical Path of the website '+ $site_titles | Out-File $logpath -Append ascii -Force

     Copy-Item -Path $source_directory/* -Destination $_.FullName -Recurse -Force

     Write-Host 'All content of the Source file have been copied to the physical path '
     $date+': All content of the Source file have been copied to the physical path ' | Out-File $logpath -Append ascii -Force
 }

 function Expand-ZIPFile($file, $destination)
 {
     $shell = new-object -com shell.application
     $zip = $shell.NameSpace($file)
     foreach($item in $zip.items())
     {
         $shell.Namespace([IO.Path]::GetFullPath($destination)).copyhere($item, 0x14)
     }
 }

 Get-ChildItem $destination_directory -Recurse -Filter *.zip | ForEach-Object `
 {
     Write-Host 'Unzipping the zipped files in the Phyical path of the site ' $site_titles
     $date+': Unzipping the zipped files in the Phyical path of the site '+$site_titles | Out-File $logpath -Append ascii -Force

     Expand-ZIPFile -File $_.FullName -Destination $destination_directory

     Write-Host 'Contents of the zipped files have been extracted successfully'
     $date+': Contents of the zipped files have been extracted successfully' | Out-File $logpath -Append ascii -Force
 }

 $date+': All contents of '+$site_titles+' have been updated successfully ' | Out-File $logpath -Append ascii -Force



}

else{
    Write-Host 'Invalid value '$update_items ' for the parameter update-item. valid values are, Content'
    $date+': Invalid value '+$update_items+' for the parameter update-item. valid values are, Content ' | Out-File $logpath -Append ascii -Force
}

'______________________END OF RUN______________________'|Out-File $logpath -Append ascii -Force
'  '|Out-File $logpath -Append ascii -Force


exit 0