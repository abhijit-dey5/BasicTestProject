$sslversion = <%=@ssl_version%>
[int]$ssl_version_int= $sslversion-($sslversion%1)
[int]$tlsversion = <%= @tls_version %>

Log-Start -LogPath $IIS_LogPath -ScriptVersion $IIS_ScriptHeader |Out-Null
#Configure Strong Encryption Protocols
Log-Write -LogPath $IIS_LogPath -LineValue " - Configure Strong Encryption Protocols"
Push-Location
Set-Location HKLM:
## Multi-Protocol Unified Hello
if(!(Test-Path -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Server")) {New-Item -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello" -Name "Server" -Force | Out-Null}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Server" -Key "Enabled"){
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Server" -Name "Enabled" -Value 0 | Out-File $IIS_LogPath -Append ascii
}

else{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\Multi-Protocol Unified Hello\Server" -Name "Enabled" -Value 0  -PropertyType DWord | Out-File $IIS_LogPath -Append ascii
}
log-Write -LogPath $IIS_LogPath -LineValue " -   Multi-Protocol Unified Hello Disabled"

# PCT 1.0
if(!(Test-Path -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Server")) {New-Item -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0" -Name "Server" -Force | Out-Null}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Server" -Key "Enabled"){
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Server" -Name "Enabled" -Value 0 | Out-File $IIS_LogPath -Append ascii
}
else
{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\PCT 1.0\Server" -Name "Enabled" -Value 0  -PropertyType DWord | Out-File $IIS_LogPath -Append ascii
}
log-Write -LogPath $IIS_LogPath -LineValue " -   PCT 1.0 Disabled"

# SSL2.0
if($ssl_version_int -eq 2)              
{  
if(!(Test-Path -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server")) {New-Item -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0" -Name "Server" -Force | Out-Null}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server" -Key "Enabled")
{
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server" -Name "Enabled" -Value 0 | Out-File $IIS_LogPath -Append ascii
}
else
{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 2.0\Server" -Name "Enabled" -Value 0  -PropertyType DWord | Out-File $IIS_LogPath -Append ascii
}
log-Write -LogPath $IIS_LogPath -LineValue " -   SSL 2.0 Disabled"
}

# SSL3.0
elseif($ssl_version_int -eq 3)
{
 if(!(Test-Path -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server")) {New-Item -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0" -Name "Server" -Force | Out-Null}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server" -Key "Enabled")
{
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server" -Name "Enabled" -Value 0 | Out-File $IIS_LogPath -Append ascii
}
else
{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Server" -Name "Enabled" -Value 0  -PropertyType DWord | Out-File $IIS_LogPath -Append ascii
}
log-Write -LogPath $IIS_LogPath -LineValue " -   SSL 3.0 Disabled"
}
else 
{log-Write -LogPath $IIS_LogPath -LineValue " -   value invalid"
}

#TLS1.0
if($tls_version -eq 0)
{
if(!(Test-Path -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server")) {New-Item -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0" -Name "Server" -Force | Out-Null}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server" -Key "DisabledByDefault"){
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server" -Name "DisabledByDefault" -Value 0 | Out-File $IIS_LogPath -Append ascii
}else{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server" -Name "DisabledByDefault" -Value 0  -PropertyType DWord -Force | Out-File $IIS_LogPath -Append ascii
}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server" -Key "Enabled"){
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server" -Name "Enabled" -Value '0xffffffff' | Out-File $IIS_LogPath -Append ascii
}else{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server" -Name "Enabled" -Value '0xffffffff'  -PropertyType DWord | Out-File $IIS_LogPath -Append ascii
}
log-Write -LogPath $IIS_LogPath -LineValue " -   TLS 1.0 Enabled"
}
#TLS1.1
elseif($tlsversion -eq 1)
{

if(!(Test-Path -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server")) {New-Item -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1" -Name "Server" -Force | Out-Null}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server" -Key "DisabledByDefault"){
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server" -Name "DisabledByDefault" -Value 0 | Out-File $IIS_LogPath -Append ascii
}else{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server" -Name "DisabledByDefault" -Value 0  -PropertyType DWord | Out-File $IIS_LogPath -Append ascii
}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server" -Key "Enabled"){
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server" -Name "Enabled" -Value '0xffffffff' | Out-File $IIS_LogPath -Append ascii
}else{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server" -Name "Enabled" -Value '0xffffffff'  -PropertyType DWord | Out-File $IIS_LogPath -Append ascii
}
log-Write -LogPath $IIS_LogPath -LineValue " -   TLS 1.1 Enabled"
}

#TLS1.2
else
{
if(!(Test-Path -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server")) {New-Item -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2" -Name "Server" -Force | Out-Null}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server" -Key "DisabledByDefault"){
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server" -Name "DisabledByDefault" -Value 0 | Out-File $IIS_LogPath -Append ascii
}else
{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server" -Name "DisabledByDefault" -Value 0  -PropertyType DWord | Out-File $IIS_LogPath -Append ascii
}
if(Test-RegistryValue ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server" -Key "Enabled"){
Set-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server" -Name "Enabled" -Value '0xffffffff' | Out-File $IIS_LogPath -Append ascii
}else{
New-ItemProperty -Path ".\System\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server" -Name "Enabled" -Value '0xffffffff'  -PropertyType DWord | Out-File $IIS_LogPath -Append ascii
}
log-Write -LogPath $IIS_LogPath -LineValue " -   TLS 1.2 Enabled"
}

Pop-Location
log-Write -LogPath $IIS_LogPath -LineValue " - Configure Strong Encryption Protocols...Complete"


                                                                                # Re-create the ciphers key.
                                                                                Log-Write -LogPath $IIS_LogPath -LineValue " - Configure Ciphers"
                                                                                New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers' -Force| Out-Null
                                                                                # Disable insecure/weak ciphers.
                                                                                $insecureCiphers = @(
                                                                                 'DES 56/56',
                                                                                    'NULL',
                                                                                     'RC2 128/128',
                                                                                        'RC2 40/128',
                                                                                          'RC2 56/128',
                                                                                            'RC4 40/128',
                                                                                             'RC4 56/128',
                                                                                                'RC4 64/128',
                                                                                                  'RC4 128/128'
                                                                                                  )

                                                                                                  Foreach ($insecureCipher in $insecureCiphers) {
                                                                                                    $key = (Get-Item HKLM:\).OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey($insecureCipher)
                                                                                                      $key.SetValue('Enabled', 0, 'DWord')
                                                                                                        $key.close()
                                                                                                          log-Write -LogPath $IIS_LogPath -LineValue " -   Weak cipher $insecureCipher has been disabled"
                                                                                                          }

                                                                                                          $secureCiphers = @(
                                                                                                            'AES 128/128',
                                                                                                              'AES 256/256',
                                                                                                                'Triple DES 168/168'
                                                                                                                )
                                                                                                                Foreach ($secureCipher in $secureCiphers) {
                                                                                                                  $key = (Get-Item HKLM:\).OpenSubKey('SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers', $true).CreateSubKey($secureCipher)
New-ItemProperty -path "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\$secureCipher" -name 'Enabled' -value '0xffffffff' -PropertyType 'DWord' -Force | Out-Null
  $key.close()
log-Write -LogPath $IIS_LogPath -LineValue " -   Strong cipher $secureCipher has been enabled."

}
log-Write -LogPath $IIS_LogPath -LineValue " - Configure Ciphers...Complete"

                                                                                                                        
#Configure Hashes
Log-Write -LogPath $IIS_LogPath -LineValue " - Configure Hashes"
# Set hashes configuration.
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\MD5' -Force | Out-Null
New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\MD5' -name Enabled -value '0xffffffff' -PropertyType 'DWord' -Force | Out-Null
 
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\SHA' -Force | Out-Null
New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\SHA' -name Enabled -value '0xffffffff' -PropertyType 'DWord' -Force | Out-Null

New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\SHA256' -Force | Out-Null
New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\SHA256' -name Enabled -value '0xffffffff' -PropertyType 'DWord' -Force | Out-Null
 
New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\SHA384' -Force | Out-Null
New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\SHA384' -name Enabled -value '0xffffffff' -PropertyType 'DWord' -Force | Out-Null

New-Item 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\SHA512' -Force | Out-Null
New-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Hashes\SHA512' -name Enabled -value '0xffffffff' -PropertyType 'DWord' -Force | Out-Null
 
log-Write -LogPath $IIS_LogPath -LineValue " - Configure Hashes...Complete"
                                                                                                                           #Configure Cipher Suite Order
                                                                                                                           Log-Write -LogPath $IIS_LogPath -LineValue " - Configure Cipher Suite Order"

                                                                                                                           # Set cipher suites order as secure as possible (Enables Perfect Forward Secrecy).
                                                                                                                           $cipherSuitesOrder = @(
                                                                                                                             'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P521',
                                                                                                                               'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P384',
                                                                                                                                 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256',
                                                                                                                                   'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P521',
                                                                                                                                     'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P384',
                                                                                                                                       'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P256',
                                                                                                                                         'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P521',
                                                                                                                                           'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P521',                                                                                                                                            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P384',
                                                                                                                                               'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256',                                                                                                                                                 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P384',
                                                                                                                                                   'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P256',
                                                                                                                                                     'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P521',
                                                                                                                                                       'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P384',
                                                                                                                                                         'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P521',
                                                                                                                                                           'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P384',
                                                                                                                                                             'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P256',
                                                                                                                                                               'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384_P521',
                                                                                                                                                                 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384_P384',
                                                                                                                                                                   'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA_P521',
                                                                                                                                                                     'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA_P384',
                                                                                                                                                                       'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA_P256',
                                                                                                                                                                         'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P521',
                                                                                                                                                                           'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P384',
                                                                                                                                                                             'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P256',
                                                                                                                                                                               'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA_P521',
                                                                                                                                                                                 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA_P384',
                                                                                                                                                                                   'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA_P256',
                                                                                                                                                                                     'TLS_RSA_WITH-AES_256_GCM_SHA384',
                                                                                                                                                                                       'TLS_RSA_WITH-AES_256_GCM_SHA256',
                                                                                                                                                                                         'TLS_RSA_WITH_AES_256_CBC_SHA256',
                                                                                                                                                                                           'TLS_RSA_WITH_AES_256_CBC_SHA',
                                                                                                                                                                                             'TLS_RSA_WITH_AES_128_CBC_SHA256',
                                                                                                                                                                                               'TLS_RSA_WITH_AES_128_CBC_SHA',
                                                                                                                                                                                                 'TLS_RSA_WITH_3DES_EDE_CBC_SHA'
                                                                                                                                                                                                 )
                                                                                                                                                                                                 $cipherSuitesAsString = [string]::join(',', $cipherSuitesOrder)
                                                                                                                                                                                                 New-ItemProperty -path 'HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002' -name 'Functions' -value $cipherSuitesAsString -PropertyType 'String' -Force | Out-Null
                                                                                                                                                                                                  
                                                                                                                                                                                                  log-Write -LogPath $IIS_LogPath -LineValue " - Configure Cipher...Complete"

  Log-Write -LogPath $IIS_LogPath -LineValue "***END: PwC IIS Configuration"
                                                                                                                                                                                                  Log-Write -LogPath $IIS_LogPath -LineValue "`n"
                                                                                                                                                                                                  Log-Write -LogPath $IIS_LogPath -LineValue "`n"
                                                                                                                                                                                                  Log-Write -LogPath $IIS_LogPath -LineValue "`n"
                                                                                                                                                                                                  Write-Host -ForegroundColor Green "***END: PwC IIS Configuration"
